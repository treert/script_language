
2016-06-30 BNF

chunk ::= block

block ::= {stat [";"]} 

stat ::=  varlist "=" explist | 
     exp | 
     "do" block "end" | 
     "while" exp "do" block "end" | 
     "repeat" block "until" exp | 
     "if" exp "then" block {"elseif" exp "then" block} ["else" block] "end" | 
     "for" Name "=" exp "," exp ["," exp] "do" block "end" | 
     "for" namelist "in" explist "do" block "end" | 
     "function" funcname funcbody |
     "local" "function" Name funcbody | 
     "local" namelist ["=" explist] |
     "return" [explist] |
     "break" |
     "continue"

namelist ::= Name {"," Name}

varlist ::= var {"," var}

global ::= $"["exp"]" | $Name

var ::= (global | Name) | 
     (global | Name) {"[" exp "]" | "." Name | args | ":" Name args} ( "[" exp "]" | "." Name )  

args ::=  "(" [explist] ")" | tableconstructor 

funcname ::= Name {"." Name} [":" Name]

function ::= "function" funcbody

funcbody ::= "(" [parlist] ")" block "end"

parlist ::= namelist ["," "..."] | "..."

explist ::= {exp ","} exp

exp ::= mainexp | exp binop exp 

mainexp ::= nil | false | true | Number | String | 
     "..." | function | tableconstructor | 
     prefixexp |
     unop exp|

prefixexp ::= var |
     (global | Name) {"[" exp "]" | "." Name | args | ":" Name args} |
     (exp) {"[" exp "]" | "." Name | args | ":" Name args}

tableconstructor ::= "{" [fieldlist] "}"

fieldlist ::= field {fieldsep field} [fieldsep]

field ::= "[" exp "]" "=" exp | Name "=" exp | exp

fieldsep ::= "," | ";"

binop ::= "+" | "-" | "*" | "/" | "^" | "%" | ".." | 
     "<" | "<=" | ">" | ">=" | "==" | "~=" | 
     "and" | "or"

unop ::= "-" | "not" | "#"


2016-06-25 可以动手写一个简单的了

全部是复制传值。这个限制下，除了GC好处理外，其他都很糟糕呀。
罢了，就限定死。
每个文件就是一个Moudle，最多加个include_once之类。

脚本的核心：
1. 处理数字计算、字符串运算。
2. 处理类似json串的结构。
3. 控制调用外部函数。
    1. 加上协程功能。

number  bool 单值
string function cfunction userdata 引用用计数GC 这些都定义成常量，是没有出度的。
table 引用计数GC 【循环引用就循环引用把。加个检测模式大不了】


要做的：
词法解析->语法解析->语义解析->code生成->VM执行
数字计算，字符串处理，函数调用。
协程。
每次VM执行就是一次协程对话 NEW RUN STOP END ERROR，
不存在lua->c++->lua的形式，C++ 只能使用 NEW RUN STOP 


一些好的但是不能支持的：
闭包
oop


